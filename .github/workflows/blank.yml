name: 'Terraform CI'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Configure AWS Credentials.
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
    # Checkout do código no runner do GitHub Actions.
    - name: Checkout code
      run: |
        git clone https://github.com/${{ github.repository }}.git .
        git checkout ${{ github.ref }}

    # Instala o Terraform diretamente (Substitua pela versão específica do Terraform se necessário).
    - name: Install Terraform
      run: |
        sudo apt-get update && sudo apt-get install -y software-properties-common
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform

    # Inicializa o Terraform.
    - name: Terraform Init
      run: |
        terraform init

    # Executa o terraform plan e salva os outputs.
    - name: Terraform Plan
      run: |
        terraform plan -out=tfplan

    # Aplica as mudanças usando terraform apply.
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply "tfplan"

    # Opcional: Destruir infraestrutura para PRs ou branches não principais.
    - name: Terraform Destroy (Optional)
      if: github.ref != 'refs/heads/main' && github.event_name == 'pull_request'
      run: |
        terraform destroy -auto-approve
